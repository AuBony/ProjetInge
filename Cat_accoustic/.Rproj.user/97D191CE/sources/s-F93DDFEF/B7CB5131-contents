#######################################################################
# PROJECT : CAT ACCOUSTIC DATA PROJECT
# TITLE : IIB3 - Method 3
# AUTHOR : BONY Audrey & de CROUTTE Anne-Victoire (AGROCAMPUS OUEST)
# DATE : DECEMBER 2020 TO FEBRURARY 2021
#######################################################################

## DATASET DF_WAV ----
## Goal :  Obtain a dataframe containing all the events labelled in the recordings
## Input : Txt files per recordings resulting from the audacity labelling process (In each file the start and end of each event labellised)
## Output : Dataframe (nb_observation x 8 : 
##         filename,
##         start of the label, end of the label, duration of the event (end - start),
##         annotation : croc (= break) or mach (= bite),
##         cat, kibble 


#Libraries 
require(readr)  # for read_csv()
require(dplyr)  # for mutate()
require(tidyr)  # for unnest()
require(purrr)  # for map(), reduce()
library(stringr) # for str_replace()

#Data manipulation
data_path <- "data/labels/labels_1/"
files <- dir(data_path, pattern = "*.txt")

data <- data_frame(filename = files) %>%
  mutate(file_contents = map(filename,         
                             ~ read_delim(file.path(data_path, .),
                                          delim="\t",
                                          escape_double = FALSE,
                                          col_names = c("start", "end", "annotation"),
                                          trim_ws = TRUE)))

data_modif <- unnest(data, cols = c(file_contents))

# Add Cat and Kibble
data_modif_chat_kibble <- data_modif %>% 
  mutate(chat = as.character(map(strsplit(data_modif$filename, "_"), 1)), 
         kibble = as.character(map(strsplit(data_modif$filename, "_"), 2)))

# Add duration
data_modif_chat_kibble_duration <- data_modif_chat_kibble %>%  mutate(duration = end - start)

# Add id_label
df_txt <- cbind.data.frame(data_frame(id = seq(1, nrow(data_modif_chat_kibble_duration))), data_modif_chat_kibble_duration)

# Modify filename .txt to .wav
IIB3_df_wav <- df_txt
IIB3_df_wav$filename <- str_replace(df_txt$filename, ".txt", ".wav")

#Cleaning environment
remove(data, data_modif, data_modif_chat_kibble_duration, data_modif_chat_kibble,df_txt) 


## FEATURES ----
## Goal : Extract features from recordings. Each break sound is cut into fix-size frames.
##        All areas between 2 breaks are considered as background noise and fully sampled.
## Input : df_wav (list of labeled events)
## Output : IIB3_df_feature list of features per frame for all noises
##          IIB3_break list of features per frame for all breaks
##          IIB3_noise list of features per frame for all background noises

# Functions
give_breaks <- function(frame_size = 0.1, ovlp_frame = 0, percent_expansion = 0, wav_path = "data/wav/", data = IIB3_df_wav){
  # Goal : Give features of frames from IIB3_df_wav recordings for break sounds
  # Input : list of labeled events
  #         frame size, ovl_frame : percentage of overlap between frames within the same sound,
  #         percent_expansion : percentage of the window size that will be taken to exceed on either side of the labelled area,
  #         It means the beginning frame will have a proportion of percent_expansion % which will not be a break sound but a background noise sound.
  #         Same for the ending frame.
  # Output : Dataframe with features for each frame.
  
  #Library
  require(dplyr)
  require(tuneR)
  require(seewave)
  
  #Initialise the dataframe
  df_feature_event <- tibble(filename = character(),
                             start = numeric(),
                             end = numeric(),
                             event = numeric(),
                             
                             th = numeric(),
                             maxdfreq = numeric(),
                             meandfreq = numeric(),
                             
                             smean = numeric(),
                             ssd = numeric(),
                             ssem = numeric(),
                             smedian = numeric(),
                             smode = numeric(),
                             sQ25 = numeric(),
                             sQ75 = numeric(),
                             sIQR = numeric(),
                             scent = numeric(),
                             sskewness = numeric(),
                             skurtosis = numeric(),
                             ssfm = numeric(),
                             ssh = numeric())
  
  #Browse through the recordings.
  for (audio in unique(data[data$annotation == "croc", "filename"])){
    
    cat(".")
    
    crocs <- data %>% filter(filename ==  audio)
    
    
    #Selection of breaks in a recording 
    for(l_croc in 1:nrow(crocs)){
      
      
      #Definition of a sample area for our frames (we can define a slightly larger interval)
      #Cutting into frames
      #Checking if the break is long enough to be cut into frames
      if (crocs[l_croc,"end"] + (frame_size*percent_expansion) - frame_size - crocs[l_croc,"start"] + (frame_size*percent_expansion) > frame_size ){
        
        #Browse into a break sound
        for (moment in seq(from =  crocs[l_croc,"start"] - (frame_size*percent_expansion), to = crocs[l_croc,"end"] + (frame_size*percent_expansion) - frame_size, by = frame_size * (1-ovlp_frame))){
          
          wav_file <- readWave(paste0(wav_path, audio),
                               from = moment,
                               to = moment + frame_size,
                               units = "seconds")
          
          #Extraction of spectro properties
          sp <- seewave::specprop(seewave::spec(wav_file@left, f = wav_file@samp.rate, plot = FALSE, scaled = TRUE, norm = FALSE))
          #Data recording.
          df_feature_event <- df_feature_event %>% add_row(
            filename = audio,
            start = moment,
            end = moment + frame_size,
            event = 1,
            
            th = seewave::th(env(wav_file, plot = FALSE)),
            maxdfreq = max(dfreq(wav_file, plot = FALSE)[,2]),
            meandfreq = mean(dfreq(wav_file, plot = FALSE)[,2]),
            
            smean = sp$mean,
            ssd = sp$sd,
            ssem = sp$sem,
            smedian = sp$median,
            smode = sp$mode,
            sQ25 = sp$Q25,
            sQ75 = sp$Q75,
            sIQR = sp$IQR,
            scent = sp$cent,
            sskewness = sp$skewness,
            skurtosis = sp$kurtosis,
            ssfm = sp$sfm,
            ssh = sp$sh)
        }
      }
    }
  }
  return(as.data.frame(df_feature_event))
}
give_no_event <- function(frame_size = 0.1, ovlp_frame = 0, wav_path = "data/wav/", data = IIB3_df_wav){
  # Goal : Give features of frames from IIB3_df_wav recordings for background noises
  # Input : list of labeled events
  #         frame size, ovl_frame : percentage of overlap between frames within the same sound,
  # Output : Dataframe with features for each frame.
  #         End of recordings are not sampled nor too short background noises parts.
  
  #Library
  require(dplyr)
  require(tuneR)
  require(seewave)
  
  #Initialise the dataframe
  df_feature_no_event <- tibble(filename = character(),
                                start = numeric(),
                                end = numeric(),
                                event = numeric(),
                                
                                th = numeric(),
                                maxdfreq =  numeric(),
                                meandfreq =  numeric(),
                                
                                smean =  numeric(),
                                ssd =  numeric(),
                                ssem =  numeric(),
                                smedian =  numeric(),
                                smode =  numeric(),
                                sQ25 =  numeric(),
                                sQ75 =  numeric(),
                                sIQR =  numeric(),
                                scent =  numeric(),
                                sskewness =  numeric(),
                                skurtosis =  numeric(),
                                ssfm =  numeric(),
                                ssh =  numeric())
  
  #Selection d'un enregistrement
  for (audio in unique(data$filename)){
    
    cat("_")
    
    no_event <- data %>% filter(filename ==  audio, annotation == "croc") #liste des crocs dans un enregistrement
    
    #In case there is no break into the recording
    if (dim(no_event)[1] == 0){
      deb <- 0
      audio_wav <- readWave(paste0(wav_path, audio), units = "seconds")
      fin <- round(length(audio_wav@left) / audio_wav@samp.rate, 2)
      
      for (moment in seq(from =  deb, to = fin - frame_size, by = frame_size * (1-ovlp_frame))){
        
        wav_file <- readWave(paste0(wav_path, audio),
                             from = moment,
                             to = moment + frame_size,
                             units = "seconds") 
        #Extraction of spectro properties
        sp <- seewave::specprop(seewave::spec(wav_file@left, f = wav_file@samp.rate, plot = FALSE, scaled = TRUE, norm = FALSE))
        #Data recording.
        df_feature_no_event <- df_feature_no_event %>% add_row(
          filename = audio,
          start = moment,
          end = moment + frame_size,
          event = 0,
          
          th = seewave::th(env(wav_file, plot = FALSE)),
          maxdfreq = max(dfreq(wav_file, plot = FALSE)[,2]),
          meandfreq = mean(dfreq(wav_file, plot = FALSE)[,2]),
          
          smean = sp$mean,
          ssd = sp$sd,
          ssem = sp$sem,
          smedian = sp$median,
          smode = sp$mode,
          sQ25 = sp$Q25,
          sQ75 = sp$Q75,
          sIQR = sp$IQR,
          scent = sp$cent,
          sskewness = sp$skewness,
          skurtosis = sp$kurtosis,
          ssfm = sp$sfm,
          ssh = sp$sh)
        
      }

    #In case there is at least one break into the recording
    }else{
      
      for (l_no_event in 1: nrow(no_event)){
        #If there is only one break
        if (l_no_event == 1){
          deb <- 0
          fin <- no_event$start[1]
        }
        #If there is more than one
        if (l_no_event >1){
          deb <- no_event$end[l_no_event - 1]
          fin <- no_event$start[l_no_event]
        }
        #The duration of the break has to be longer than the frame size
        if (fin - deb > frame_size){
          for (moment in seq(from =  deb, to = fin - frame_size, by = frame_size * (1-ovlp_frame))){
            
            wav_file <- readWave(paste0(wav_path, audio),
                                 from = moment,
                                 to = moment + frame_size,
                                 units = "seconds") 
            wav_file <- tuneR::normalize(wav_file, center = TRUE)
            #Extraction of spectro properties
            sp <- seewave::specprop(seewave::spec(wav_file@left, f = wav_file@samp.rate, plot = FALSE, scaled = TRUE, norm = FALSE))
            #Data recording.
            df_feature_no_event <- df_feature_no_event %>% add_row(
              filename = audio,
              start = moment,
              end = moment + frame_size,
              event = 0,
              
              th = seewave::th(env(wav_file, plot = FALSE)),
              maxdfreq = max(dfreq(wav_file, plot = FALSE)[,2]),
              meandfreq = mean(dfreq(wav_file, plot = FALSE)[,2]),
              
              smean = sp$mean,
              ssd = sp$sd,
              ssem = sp$sem,
              smedian = sp$median,
              smode = sp$mode,
              sQ25 = sp$Q25,
              sQ75 = sp$Q75,
              sIQR = sp$IQR,
              scent = sp$cent,
              sskewness = sp$skewness,
              skurtosis = sp$kurtosis,
              ssfm = sp$sfm,
              ssh = sp$sh)
            
          }
        }
      }
    }
  }
  return(as.data.frame(df_feature_no_event))
}

# Execution Data Test and Data Train
IIB3_breaks <- give_breaks(frame_size = 0.1, ovlp_frame = 0, percent_expansion = 0, wav_path = "data/wav/", data = IIB3_df_wav)
IIB3_no_event<- give_no_event(frame_size = 0.1, ovlp_frame = 0, wav_path = "data/wav/", data = IIB3_df_wav)


filename_train <- sample(unique(IIB3_df_wav$filename), 0.7 * length(unique(IIB3_df_wav$filename)))

IIB3_df_train <- IIB3_df_wav %>% filter(filename %in% filename_train)
IIB3_df_test <- IIB3_df_wav %>%  filter(!(filename %in% filename_train))

IIB3_breaks_train <- give_breaks(frame_size = 0.1, ovlp_frame = 0, percent_expansion = 0, wav_path = "data/wav/", data = IIB3_df_train)
IIB3_no_event_train <- give_no_event(frame_size = 0.1, ovlp_frame = 0, wav_path = "data/wav/", data = IIB3_df_train)

IIB3_breaks_test <- give_breaks(frame_size = 0.1, ovlp_frame = 0, percent_expansion = 0, wav_path = "data/wav/", data = IIB3_df_test)
IIB3_no_event_test <- give_no_event(frame_size = 0.1, ovlp_frame = 0, wav_path = "data/wav/", data = IIB3_df_test)


IIB3_y_train <- as.factor(c(IIB3_breaks_train$event, IIB3_no_event_train$event))
IIB3_x_train <- rbind.data.frame(IIB3_breaks_train[, 5:20], IIB3_no_event_train[, 5:20])

IIB3_y_test <- as.factor((c(IIB3_breaks_test$event, IIB3_no_event_test$event)))
IIB3_x_test <- rbind.data.frame(IIB3_breaks_test[, 5:20], IIB3_no_event_test[, 5:20])

## 

