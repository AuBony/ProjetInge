data_path <- "data/labels/"
files <- dir(data_path, pattern = "*.txt")
require(readr)  # for read_csv()
require(dplyr)  # for mutate()
require(tidyr)  # for unnest()
require(purrr)  # for map(), reduce()
library(stringr) # for str_replace()
data <- data_frame(filename = files) %>%
mutate(file_contents = map(filename,
~ read_delim(file.path(data_path, .),
delim="\t",
escape_double = FALSE,
col_names = c("start", "end", "annotation"),
trim_ws = TRUE)))
data_modif <- unnest(data, cols = c(file_contents))
data_modif_chat_kibble_duration <- data_modif %>%
mutate(chat = as.character(map(strsplit(data_modif$filename, "_"), 1)),
kibble = as.character(map(strsplit(data_modif$filename, "_"), 2)),
duration = end-start)
data_path <- "data/labels/"
files <- dir(data_path, pattern = "*.txt")
files
require(readr)  # for read_csv()
require(dplyr)  # for mutate()
require(tidyr)  # for unnest()
require(purrr)  # for map(), reduce()
library(stringr) # for str_replace()
data_path <- "data/labels/"
files <- dir(data_path, pattern = "*.txt")
data <- data_frame(filename = files) %>%
mutate(file_contents = map(filename,
~ read_delim(file.path(data_path, .),
delim="\t",
escape_double = FALSE,
col_names = c("start", "end", "annotation"),
trim_ws = TRUE)))
data_modif <- unnest(data, cols = c(file_contents))
data_modif_chat_kibble_duration <- data_modif %>%
mutate(chat = as.character(map(strsplit(data_modif$filename, "_"), 1)),
kibble = as.character(map(strsplit(data_modif$filename, "_"), 2)),
duration = end-start)
df_txt <- cbind.data.frame(data_frame(id = seq(1, nrow(data_modif_chat_kibble_duration))), data_modif_chat_kibble_duration)
df_wav <- df_txt
df_wav$filename <- str_replace(df_txt$filename, ".txt", ".wav")
data_path <- "data/labels/labels_1/"
files <- dir(data_path, pattern = "*.txt")
files
data <- data_frame(filename = files) %>%
mutate(file_contents = map(filename,
~ read_delim(file.path(data_path, .),
delim="\t",
escape_double = FALSE,
col_names = c("start", "end", "annotation"),
trim_ws = TRUE)))
data_modif <- unnest(data, cols = c(file_contents))
data_modif_chat_kibble_duration <- data_modif %>%
mutate(chat = as.character(map(strsplit(data_modif$filename, "_"), 1)),
kibble = as.character(map(strsplit(data_modif$filename, "_"), 2)),
duration = end-start)
df_txt <- cbind.data.frame(data_frame(id = seq(1, nrow(data_modif_chat_kibble_duration))), data_modif_chat_kibble_duration)
df_wav <- df_txt
df_wav$filename <- str_replace(df_txt$filename, ".txt", ".wav")
df_wav
data_path <- "data/labels/labels_1/"
files <- dir(data_path, pattern = "*.txt")
data <- data_frame(filename = files) %>%
mutate(file_contents = map(filename,
~ read_delim(file.path(data_path, .),
delim="\t",
escape_double = FALSE,
col_names = c("start", "end", "annotation"),
trim_ws = TRUE)))
data_modif <- unnest(data, cols = c(file_contents))
data_modif_chat_kibble_duration <- data_modif %>%
mutate(chat = as.character(map(strsplit(data_modif$filename, "_"), 1)),
kibble = as.character(map(strsplit(data_modif$filename, "_"), 2)),
duration = end-start)
df_txt <- cbind.data.frame(data_frame(id = seq(1, nrow(data_modif_chat_kibble_duration))), data_modif_chat_kibble_duration)
df_wav <- df_txt
df_wav$filename <- str_replace(df_txt$filename, ".txt", ".wav")
require(readr)  # for read_csv()
require(dplyr)  # for mutate()
require(tidyr)  # for unnest()
require(purrr)  # for map(), reduce()
library(stringr) # for str_replace()
data_path <- "data/labels/labels_1/"
files <- dir(data_path, pattern = "*.txt")
data <- data_frame(filename = files) %>%
mutate(file_contents = map(filename,
~ read_delim(file.path(data_path, .),
delim="\t",
escape_double = FALSE,
col_names = c("start", "end", "annotation"),
trim_ws = TRUE)))
data_modif <- unnest(data, cols = c(file_contents))
data_modif_chat_kibble_duration <- data_modif %>%
mutate(chat = as.character(map(strsplit(data_modif$filename, "_"), 1)),
kibble = as.character(map(strsplit(data_modif$filename, "_"), 2)),
duration = end-start)
df_txt <- cbind.data.frame(data_frame(id = seq(1, nrow(data_modif_chat_kibble_duration))), data_modif_chat_kibble_duration)
df_wav <- df_txt
df_wav$filename <- str_replace(df_txt$filename, ".txt", ".wav")
remove(data)
remove(data, data_modif, data_modif_chat_kibble_duration, df_txt)
df_wav
data <- data_frame(filename = files) %>%
mutate(file_contents = map(filename,
~ read_delim(file.path(data_path, .),
delim="\t",
escape_double = FALSE,
col_names = c("start", "end", "annotation"),
trim_ws = TRUE)))
data_modif <- unnest(data, cols = c(file_contents))
# Add Cat and Kibble
data_modif_chat_kibble <- data_modif %>%
mutate(chat = as.character(map(strsplit(data_modif$filename, "_"), 1)),
kibble = as.character(map(strsplit(data_modif$filename, "_"), 2)))
# Add duration
data_modif_chat_kibble_duration <- data_modif_chat_kibble %>%  mutate(duration = end - start)
# Add id_label
df_txt <- cbind.data.frame(data_frame(id = seq(1, nrow(data_modif_chat_kibble_duration))), data_modif_chat_kibble_duration)
# Modify filename .txt to .wav
df_wav <- df_txt
df_wav$filename <- str_replace(df_txt$filename, ".txt", ".wav")
df_wav
#Cleaning environment
remove(data, data_modif, data_modif_chat_kibble_duration, df_txt)
#Cleaning environment
remove(data, data_modif, data_modif_chat_kibble_duration, data_modif_chat_kibble,df_txt)
library(soundgen)
library(tuneR)
library(seewave)
?specprop
data_path <- "data/labels/labels_1/"
files <- dir(data_path, pattern = "*.txt")
data <- data_frame(filename = files) %>%
mutate(file_contents = map(filename,
~ read_delim(file.path(data_path, .),
delim="\t",
escape_double = FALSE,
col_names = c("start", "end", "annotation"),
trim_ws = TRUE)))
data_modif <- unnest(data, cols = c(file_contents))
# Add Cat and Kibble
data_modif_chat_kibble <- data_modif %>%
mutate(chat = as.character(map(strsplit(data_modif$filename, "_"), 1)),
kibble = as.character(map(strsplit(data_modif$filename, "_"), 2)))
# Add duration
data_modif_chat_kibble_duration <- data_modif_chat_kibble %>%  mutate(duration = end - start)
# Add id_label
df_txt <- cbind.data.frame(data_frame(id = seq(1, nrow(data_modif_chat_kibble_duration))), data_modif_chat_kibble_duration)
# Modify filename .txt to .wav
II_B_1_df_wav <- df_txt
II_B_1_df_wav$filename <- str_replace(df_txt$filename, ".txt", ".wav")
#Cleaning environment
remove(data, data_modif, data_modif_chat_kibble_duration, data_modif_chat_kibble,df_txt)
remove(df_wav)
data_path <- "data/labels/labels_1/"
files <- dir(data_path, pattern = "*.txt")
data <- data_frame(filename = files) %>%
mutate(file_contents = map(filename,
~ read_delim(file.path(data_path, .),
delim="\t",
escape_double = FALSE,
col_names = c("start", "end", "annotation"),
trim_ws = TRUE)))
data_modif <- unnest(data, cols = c(file_contents))
# Add Cat and Kibble
data_modif_chat_kibble <- data_modif %>%
mutate(chat = as.character(map(strsplit(data_modif$filename, "_"), 1)),
kibble = as.character(map(strsplit(data_modif$filename, "_"), 2)))
# Add duration
data_modif_chat_kibble_duration <- data_modif_chat_kibble %>%  mutate(duration = end - start)
# Add id_label
df_txt <- cbind.data.frame(data_frame(id = seq(1, nrow(data_modif_chat_kibble_duration))), data_modif_chat_kibble_duration)
# Modify filename .txt to .wav
IIB1_df_wav <- df_txt
IIB1_df_wav$filename <- str_replace(df_txt$filename, ".txt", ".wav")
#Cleaning environment
remove(data, data_modif, data_modif_chat_kibble_duration, data_modif_chat_kibble,df_txt)
remove(II_B_1_df_wav)
library(soundgen)
library(tuneR)
library(seewave)
#Edit path (direction where the wav files are)
wav_path <- "data/wav/"
#Init df_feature
IIB1_df_feature <- tibble(id = numeric(),
filename = character(),
annotation = character(),
th = numeric(),
maxdfreq = numeric(),
meandfreq = numeric(),
smean = numeric(),
ssd = numeric(),
ssem = numeric(),
smedian = numeric(),
smode = numeric(),
sQ25 = numeric(),
sQ75 = numeric(),
sIQR = numeric(),
scent = numeric(),
sskewness = numeric(),
skurtosis = numeric(),
ssfm = numeric(),
ssh = numeric(),
sprec = numeric()
)
# Run through df_wav line by line
for (i in 1:nrow(df_wav)){
# wav_file contains an event (croc or mach)
wav_file <- readWave(paste0(wav_path, df_wav[i,2]),
from = df_wav[i,3],
to = df_wav[i,4],
units = "seconds")
# Obtain a list of statistical properties of a frequency spectrum
sp <- specprop(spec(wav_file@left, f = wav_file@samp.rate, plot = FALSE, scaled = TRUE, norm = FALSE))
# Add Features into IIB1_df_feature
IIB1_df_feature <- IIB1_df_feature %>% add_row(id = df_wav$id[i],
filename = df_wav$filename[i],
annotation = df_wav$annotation[i],
th = th(env(wav_file, plot = FALSE)),
maxdfreq = max(dfreq(wav_file, plot = FALSE)[,2]),
meandfreq = mean(dfreq(wav_file, plot = FALSE)[,2]),
smean = sp$mean,
ssd = sp$sd,
ssem = sp$sem,
smedian = sp$median,
smode = sp$mode,
sQ25 = sp$Q25,
sQ75 = sp$Q75,
sIQR = sp$IQR,
scent = sp$cent,
sskewness = sp$skewness,
skurtosis = sp$kurtosis,
ssfm = sp$sfm,
ssh = sp$sh,
sprec = sp$prec
)
}
# Run through df_wav line by line
for (i in 1:nrow(IIB1_df_wav)){
# wav_file contains an event (croc or mach)
wav_file <- readWave(paste0(wav_path, df_wav[i,2]),
from = df_wav[i,3],
to = df_wav[i,4],
units = "seconds")
# Obtain a list of statistical properties of a frequency spectrum
sp <- specprop(spec(wav_file@left, f = wav_file@samp.rate, plot = FALSE, scaled = TRUE, norm = FALSE))
# Add Features into IIB1_df_feature
IIB1_df_feature <- IIB1_df_feature %>% add_row(id = df_wav$id[i],
filename = df_wav$filename[i],
annotation = df_wav$annotation[i],
th = th(env(wav_file, plot = FALSE)),
maxdfreq = max(dfreq(wav_file, plot = FALSE)[,2]),
meandfreq = mean(dfreq(wav_file, plot = FALSE)[,2]),
smean = sp$mean,
ssd = sp$sd,
ssem = sp$sem,
smedian = sp$median,
smode = sp$mode,
sQ25 = sp$Q25,
sQ75 = sp$Q75,
sIQR = sp$IQR,
scent = sp$cent,
sskewness = sp$skewness,
skurtosis = sp$kurtosis,
ssfm = sp$sfm,
ssh = sp$sh,
sprec = sp$prec
)
}
# Run through df_wav line by line
for (i in 1:nrow(IIB1_df_wav)){
# wav_file contains an event (croc or mach)
wav_file <- readWave(paste0(wav_path, IIB1_df_wav[i,2]),
from = IIB1_df_wav[i,3],
to = IIB1_df_wav[i,4],
units = "seconds")
# Obtain a list of statistical properties of a frequency spectrum
sp <- specprop(spec(wav_file@left, f = wav_file@samp.rate, plot = FALSE, scaled = TRUE, norm = FALSE))
# Add Features into IIB1_df_feature
IIB1_df_feature <- IIB1_df_feature %>% add_row(id = IIB1_df_wav$id[i],
filename = IIB1_df_wav$filename[i],
annotation = IIB1_df_wav$annotation[i],
th = th(env(wav_file, plot = FALSE)),
maxdfreq = max(dfreq(wav_file, plot = FALSE)[,2]),
meandfreq = mean(dfreq(wav_file, plot = FALSE)[,2]),
smean = sp$mean,
ssd = sp$sd,
ssem = sp$sem,
smedian = sp$median,
smode = sp$mode,
sQ25 = sp$Q25,
sQ75 = sp$Q75,
sIQR = sp$IQR,
scent = sp$cent,
sskewness = sp$skewness,
skurtosis = sp$kurtosis,
ssfm = sp$sfm,
ssh = sp$sh,
sprec = sp$prec
)
}
View(IIB1_df_feature)
write.table(IIB1_df_feature, file = "data/features/IIB1_df_feature.txt")
remove(sp, wav_file)
set.seed(1234)
n <- nrow(IIB1_df_feature)
n.train <- round(n/4, 0)
n.test <- n-n.train
ind.train <- sample(1:nrow(df_feature),n.train)
data.train <- df_feature[ind.train,]
data.test <- df_feature[-ind.train,]
x_train <- df_feature[ind.train, 4:20]
y_train <-  df_feature[ind.train, "annotation"]
y_train <- as.factor(y_train)
x_test <- df_feature[-ind.train, 4:20]
y_test <- df_feature[-ind.train, "annotation"]
#data train and data test
set.seed(1234)
n <- nrow(IIB1_df_feature)
n.train <- round(n/4, 0)
n.test <- n-n.train
ind.train <- sample(1:nrow(df_feature),n.train)
ind.train <- sample(1:nrow(IIB1_df_feature),n.train)
ind.train <- sample(1:nrow(IIB1_df_feature),n.train)
data.train <- IIB1_df_feature[ind.train,]
data.test <- IIB1_df_feature[-ind.train,]
x_train <- IIB1_df_feature[ind.train, 4:20]
y_train <-  IIB1_df_feature[ind.train, "annotation"]
y_train <- as.factor(y_train)
x_test <- IIB1_df_feature[-ind.train, 4:20]
y_test <- IIB1_df_feature[-ind.train, "annotation"]
#libraries
require(class)
#Functions
get.error <- function(class,pred){
cont.tab <- table(class,pred)
print(cont.tab)
return((cont.tab[2,1]+cont.tab[1,2])/(sum(cont.tab)))
}
get.sensitivity <- function(class,pred){
cont.tab <- table(class,pred)
return((cont.tab[2,2])/(sum(cont.tab[2,])))
}
get.specificity <- function(class,pred){
cont.tab <- table(class,pred)
return((cont.tab[1,1])/(sum(cont.tab[1,])))
}
# Data train and data test
set.seed(1234)
n <- nrow(IIB1_df_feature)
n.train <- round(n/4, 0)
n.test <- n-n.train
ind.train <- sample(1:nrow(IIB1_df_feature),n.train)
data.train <- IIB1_df_feature[ind.train,]
data.test <- IIB1_df_feature[-ind.train,]
x_train <- IIB1_df_feature[ind.train, 4:20]
y_train <-  IIB1_df_feature[ind.train, "annotation"]
y_train <- as.factor(y_train)
x_test <- IIB1_df_feature[-ind.train, 4:20]
y_test <- IIB1_df_feature[-ind.train, "annotation"]
# Knn algorithm
pred.test.knn.1 <- knn(train=data.train[,4:20],test=data.test[,4:20],cl= data.train$annotation,k=1)
pred.test.knn.1
require(randomForest)
get.error(y_test, pred.test.knn.1)
get.specificity(y_test, pred.test.knn.1)
get.error <- function(class,pred){
cont.tab <- table(class,pred)
print(cont.tab)
return((cont.tab[2,1]+cont.tab[1,2])/(sum(cont.tab)))
}
get.sensitivity <- function(class,pred){
cont.tab <- table(class,pred)
return((cont.tab[2,2])/(sum(cont.tab[2,])))
}
get.specificity <- function(class,pred){
cont.tab <- table(class,pred)
return((cont.tab[1,1])/(sum(cont.tab[1,])))
}
pred.test.knn.1 <- knn(train= x_train, test=x_test, cl= y_train, k=1)
# Random Forest algorithm
# Comparison Knn VS Random Forest _ ROC Curve
get.error(y_test, pred.test.knn.1)
get.specificity(y_test, pred.test.knn.1)
get.sensitivity(y_test, pred.test.knn.1)
# Knn algorithm
pred.test.knn.1 <- knn(train= x_train, test=x_test, cl= y_train, k=1)
x_train <- IIB1_df_feature[ind.train, 4:20]
y_train <- IIB1_df_feature[ind.train, "annotation"]
y_train <- as.factor(y_train)
x_test <- IIB1_df_feature[-ind.train, 4:20]
y_test <- IIB1_df_feature[-ind.train, "annotation"]
x_train
y_train
y_train <- IIB1_df_feature[ind.train, "annotation"]
y_train
y_train <- as.factor(y_train)
y_train
y_train <- as.vector(IIB1_df_feature[ind.train, "annotation"])
y_train <- as.factor(y_train)
y_train
y_train <- as.vector(IIB1_df_feature[ind.train, "annotation"])
y_train
y_train <- as.data.frame(IIB1_df_feature[ind.train, "annotation"])
y_train
y_train <- as.factor(y_train)
y_train
get.error(y_test, pred.test.knn.1)
y_train <- as.data.frame(IIB1_df_feature[ind.train, "annotation"])
class(y_train)
y_train <- as.factor(y_train$annotation)
y_train
x_train <- IIB1_df_feature[ind.train, 4:20]
y_train <- as.data.frame(IIB1_df_feature[ind.train, "annotation"])
y_train <- as.factor(y_train$annotation)
x_test <- IIB1_df_feature[-ind.train, 4:20]
y_test <- IIB1_df_feature[-ind.train, "annotation"]
# Knn algorithm
pred.test.knn.1 <- knn(train= x_train, test=x_test, cl= y_train, k=1)
# Random Forest algorithm
# Comparison Knn VS Random Forest _ ROC Curve
get.error(y_test, pred.test.knn.1)
get.specificity(y_test, pred.test.knn.1)
get.sensitivity(y_test, pred.test.knn.1)
y_test
y_test <- as.data.frame(IIB1_df_feature[-ind.train, "annotation"])
dim(y_test)
dim(pred.test.knn.1)
y_test <- as.data.frame(IIB1_df_feature$annotation[-ind.train])
y_test
y_test <- as.data.frame(IIB1_df_feature[-ind.train, "annotation"])
y_test
y_test <- as.factor(as.data.frame(IIB1_df_feature[-ind.train, "annotation"])$annotation)
y_test
# Knn algorithm
pred.test.knn.1 <- knn(train= x_train, test=x_test, cl= y_train, k=1)
get.error(y_test, pred.test.knn.1)
get.specificity(y_test, pred.test.knn.1)
get.sensitivity(y_test, pred.test.knn.1)
# Random Forest algorithm
model.50 <- randomForest( y_train~ .,
data = x_train,
ntree = 50, na.action = na.omit,
importance = TRUE)
plot(model.50)
pred.test.rf.50 <- predict(model.50, newdata = x_test)
CM.rf.50 <- table(y_test, pred.test.rf.50)
CM.rf.50
get.error(y_test, pred.test.knn.1)
get.specificity(y_test, pred.test.knn.1)
get.sensitivity(y_test, pred.test.knn.1)
get.error(y_test,pred.test.rf.50)
get.specificity(y_test,pred.test.rf.50)
get.sensitivity(y_test,pred.test.rf.50)
# Comparison Knn VS Random Forest _ ROC Curve
get.error(y_test, pred.test.knn.1)
get.specificity(y_test, pred.test.knn.1)
get.sensitivity(y_test, pred.test.knn.1)
get.error(y_test,pred.test.rf.50)
get.specificity(y_test,pred.test.rf.50)
get.sensitivity(y_test,pred.test.rf.50)
library(ROCR)
