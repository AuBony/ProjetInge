length(seq(from = range_ovl_break[1], to = range_ovl_break[2], by = range_ovl_break[3] )) *
length(seq(from = range_ovl_no_event[1], to = range_ovl_no_event[2], by = range_ovl_no_event[3] )) *
length(seq(from = range_exp[1], to = range_exp[2], by = range_exp[3] ))
total
#frame size
for (size in seq(from = range_size[1], to = range_size[2], by = range_size[3] )){
#Expansion
for (expansion in seq(from = range_exp[1], to = range_exp[2], by = range_exp[3] )){
#Overlap
for (ovl_break in seq(from = range_ovl_break[1], to = range_ovl_break[2], by = range_ovl_break[3] )){
for (ovl_no_event in seq(from = range_ovl_no_event[1], to = range_ovl_no_event[2], by = range_ovl_no_event[3] )){
require(randomForest)
require(dplyr)
tour <- tour + 1
print(paste0(tour, "/", total))
ERROR <-0
SENS <- 0
SPEC <- 0
CONFU_0 <- 0
CONFU_1 <- 0
features_croc <- give_breaks(frame_size = size, ovlp_frame = ovl_break,
percent_expansion = expansion,
wav_path = "data/wav/", data = IIB3_df_wav)
features_no_event <- give_no_event(frame_size = size, ovlp_frame = ovl_no_event,
wav_path = "data/wav/", data = IIB3_df_wav)
for (i in 1:repet){
set.seed(i)
filename_train <- sample(unique(IIB3_df_wav$filename), 0.7 * length(unique(IIB3_df_wav$filename)))
croc_train <- features_croc %>% filter(filename %in% filename_train)
croc_test <- features_croc %>% filter(!(filename %in% filename_train))
no_event_train <- features_no_event %>% filter(filename %in% filename_train)
no_event_test <- features_no_event %>% filter(!(filename %in% filename_train))
y_train <- as.factor(c(croc_train$event, no_event_train$event))
x_train <- rbind.data.frame(croc_train[, 5:20], no_event_train[, 5:20])
y_test <- as.factor((c(croc_test$event, no_event_test$event)))
x_test <- rbind.data.frame(croc_test[, 5:20], no_event_test[, 5:20])
#Model
model <- randomForest( y_train~ .,
data = x_train,
ntree = 40,
mtry = 4,
importance = TRUE)
pred_test <-  predict(model, newdata = x_test)
ERROR <- ERROR + get.error(y_test, pred_test)
SENS <- SENS + get.sensitivity(y_test,pred_test)
SPEC <- SPEC + get.specificity(y_test,pred_test)
CONFU_0 <- CONFU_0 + model$confusion[1,3]
CONFU_1 <- CONFU_1 + model$confusion[2,3]
}
IIB3_df_ERROR_ovl <- IIB3_df_ERROR_ovl  %>% add_row(
expansion = expansion,
size = size,
ovl_croc = ovl_croc,
ovl_no_event = ovl_no_event,
Error = ERROR/5,
Sens = SENS / 5,
Spec = SPEC/5,
class_error_0 = CONFU_0/5,
class_error_1 = CONFU_1/5)
}
}
}
remove(features_croc, features_no_event,
croc_train, croc_test,
no_event_train, no_event_test,
y_train, x_train, y_test, x_test)
}
IIB3_df_ERROR_ovl <- tibble(
expansion = numeric(),
size = numeric(),
ovl_croc = numeric(),
ovl_no_event = numeric(),
Error = numeric (),
Sens = numeric(),
Spec = numeric(),
class_error_0 = numeric(),
class_error_1 = numeric())
#Counter
tour <- 0
#Total number of combinations
total <- length(seq(from = range_size[1], to = range_size[2], by = range_size[3] )) *
length(seq(from = range_ovl_break[1], to = range_ovl_break[2], by = range_ovl_break[3] )) *
length(seq(from = range_ovl_no_event[1], to = range_ovl_no_event[2], by = range_ovl_no_event[3] )) *
length(seq(from = range_exp[1], to = range_exp[2], by = range_exp[3] ))
total
#Execution
#BEWARE : Depending on your choice of value ranges the execution time can be very long!
#frame size
for (size in seq(from = range_size[1], to = range_size[2], by = range_size[3] )){
#Expansion
for (expansion in seq(from = range_exp[1], to = range_exp[2], by = range_exp[3] )){
#Overlap
for (ovl_break in seq(from = range_ovl_break[1], to = range_ovl_break[2], by = range_ovl_break[3] )){
for (ovl_no_event in seq(from = range_ovl_no_event[1], to = range_ovl_no_event[2], by = range_ovl_no_event[3] )){
require(randomForest)
require(dplyr)
tour <- tour + 1
print(paste0(tour, "/", total))
ERROR <-0
SENS <- 0
SPEC <- 0
CONFU_0 <- 0
CONFU_1 <- 0
features_croc <- give_breaks(frame_size = size, ovlp_frame = ovl_break,
percent_expansion = expansion,
wav_path = "data/wav/", data = IIB3_df_wav)
features_no_event <- give_no_event(frame_size = size, ovlp_frame = ovl_no_event,
wav_path = "data/wav/", data = IIB3_df_wav)
for (i in 1:repet){
set.seed(i)
filename_train <- sample(unique(IIB3_df_wav$filename), 0.7 * length(unique(IIB3_df_wav$filename)))
croc_train <- features_croc %>% filter(filename %in% filename_train)
croc_test <- features_croc %>% filter(!(filename %in% filename_train))
no_event_train <- features_no_event %>% filter(filename %in% filename_train)
no_event_test <- features_no_event %>% filter(!(filename %in% filename_train))
y_train <- as.factor(c(croc_train$event, no_event_train$event))
x_train <- rbind.data.frame(croc_train[, 5:20], no_event_train[, 5:20])
y_test <- as.factor((c(croc_test$event, no_event_test$event)))
x_test <- rbind.data.frame(croc_test[, 5:20], no_event_test[, 5:20])
#Model
model <- randomForest( y_train~ .,
data = x_train,
ntree = 40,
mtry = 4,
importance = TRUE)
pred_test <-  predict(model, newdata = x_test)
ERROR <- ERROR + get.error(y_test, pred_test)
SENS <- SENS + get.sensitivity(y_test,pred_test)
SPEC <- SPEC + get.specificity(y_test,pred_test)
CONFU_0 <- CONFU_0 + model$confusion[1,3]
CONFU_1 <- CONFU_1 + model$confusion[2,3]
}
IIB3_df_ERROR_ovl <- IIB3_df_ERROR_ovl  %>% add_row(
expansion = expansion,
size = size,
ovl_croc = ovl_croc,
ovl_no_event = ovl_no_event,
Error = ERROR/repet,
Sens = SENS /repet,
Spec = SPEC/repet,
class_error_0 = CONFU_0/repet,
class_error_1 = CONFU_1/repet)
}
}
}
remove(features_croc, features_no_event,
croc_train, croc_test,
no_event_train, no_event_test,
y_train, x_train, y_test, x_test)
}
IIB3_df_ERROR_ovl <- as.data.frame(IIB3_df_ERROR_ovl)
write.table(IIB3_df_ERROR_ovl, file = "data/error/IIB3_df_ERROR_ovl.txt")
require(dplyr)
require(randomForest)
require(tidyr)
# Function
get.error <- function(class,pred){
cont.tab <- table(class,pred)
return((cont.tab[2,1]+cont.tab[1,2])/(sum(cont.tab)))
}
# Parameters
expansion <- 0.6
size <- 0.2
ovl_croc <- 0.7
ovl_no_event <- 0
#Initialisation
IIB3_Error_cat <- tibble(
chat = character(),
ERROR_glob = numeric(),
class_1_glob = numeric(),
class_0_glob = numeric(),
ERROR_chat = numeric(),
class_1_chat = numeric(),
class_0_chat = numeric(),
d_ERROR = numeric(),
d_class_1 = numeric(),
d_class_0 = numeric(),
expansion = numeric(),
size = numeric(),
ovl_croc = numeric(),
ovl_no_event = numeric()
)
feature_croc <- give_breaks(frame_size = size, ovlp_frame = ovl_break,
percent_expansion = expansion,
wav_path = "data/wav/", data = IIB3_df_wav)
feature_no_event <- give_no_event(frame_size = size, ovlp_frame = ovl_no_event,
wav_path = "data/wav/", data = IIB3_df_wav)
for (cat in unique(IIB3_df_wav$chat)){
print(cat)
indice_chat <- grep(pattern = cat, x = IIB3_df_wav$chat)
indice_croc <- grep(pattern = chat, x = feature_croc$filename)
indice_event <- grep(pattern = chat, x = feature_no_event$filename)
df_reduce <- IIB3_df_wav[-indice_chat,] #dataset without one cat
ERROR_glob <-0
CONFU_0_glob <- 0
CONFU_1_glob <- 0
ERROR_chat <- 0
CONFU_0_chat <- 0
CONFU_1_chat <- 0
for (i in 1:10){
set.seed(i)
filename_train <- sample(unique(df_reduce$filename), 0.7 * length(unique(df_reduce$filename)))
croc_train <- feature_croc %>% filter(filename %in% filename_train)
croc_test <- feature_croc %>% filter(!(filename %in% filename_train))
no_event_train <- feature_no_event %>% filter(filename %in% filename_train)
no_event_test <- feature_no_event %>% filter(!(filename %in% filename_train))
y_train <- as.factor(c(croc_train$event, no_event_train$event))
x_train <- rbind.data.frame(croc_train[, 5:20], no_event_train[, 5:20])
y_test <- as.factor((c(croc_test$event, no_event_test$event)))
x_test <- rbind.data.frame(croc_test[, 5:20], no_event_test[, 5:20])
y_test_chat <- as.factor(c(feature_croc[indice_croc,"event"], feature_no_event[indice_event,"event"]))
x_test_chat <- rbind.data.frame(feature_croc[indice_croc, 5:20], feature_no_event[indice_event, 5:20])
#Model
model <- randomForest( y_train~ .,
data = x_train,
ntree = 40,
mtry = 4,
importance = TRUE)
pred_test <-  predict(model, newdata = x_test)
ERROR_glob <- ERROR_glob + get.error(y_test, pred_test)
CONFU_0_glob <- CONFU_0_glob + model$confusion[1,3]
CONFU_1_glob <- CONFU_1_glob + model$confusion[2,3]
pred_test_chat <-  predict(model, newdata = x_test_chat)
matrix_chat <- table(pred_test_chat, y_test_chat)
ERROR_chat <- ERROR_chat + (matrix_chat[2] + matrix_chat[3]) / sum(matrix_chat)
CONFU_0_chat <- CONFU_0_chat + (matrix_chat[2] / sum(matrix_chat[,1]))
CONFU_1_chat <- CONFU_1_chat + (matrix_chat[3] / sum(matrix_chat[,2]))
}
IIB3_Error_cat <- IIB3_Error_cat %>% add_row(
chat = chat,
ERROR_glob = ERROR_glob/10,
class_1_glob = CONFU_1_glob/10,
class_0_glob = CONFU_0_glob/10,
ERROR_chat = ERROR_chat/10,
class_1_chat = CONFU_1_chat/10,
class_0_chat = CONFU_0_chat/10,
d_ERROR =  ERROR_chat/10 - ERROR_glob/10,
d_class_1 = CONFU_1_chat/10 - CONFU_1_glob/10,
d_class_0 = CONFU_0_chat/10 - CONFU_0_glob/10,
expansion = expansion,
size = size,
ovl_croc = ovl_croc,
ovl_no_event = ovl_no_event
)
}
#Initialisation
IIB3_Error_cat <- tibble(
chat = character(),
ERROR_glob = numeric(),
class_1_glob = numeric(),
class_0_glob = numeric(),
ERROR_chat = numeric(),
class_1_chat = numeric(),
class_0_chat = numeric(),
d_ERROR = numeric(),
d_class_1 = numeric(),
d_class_0 = numeric(),
expansion = numeric(),
size = numeric(),
ovl_croc = numeric(),
ovl_no_event = numeric()
)
for (cat in unique(IIB3_df_wav$chat)){
print(cat)
indice_chat <- grep(pattern = cat, x = IIB3_df_wav$chat)
indice_croc <- grep(pattern = cat, x = feature_croc$filename)
indice_event <- grep(pattern = cat, x = feature_no_event$filename)
df_reduce <- IIB3_df_wav[-indice_chat,] #dataset without one cat
ERROR_glob <-0
CONFU_0_glob <- 0
CONFU_1_glob <- 0
ERROR_chat <- 0
CONFU_0_chat <- 0
CONFU_1_chat <- 0
for (i in 1:10){
set.seed(i)
filename_train <- sample(unique(df_reduce$filename), 0.7 * length(unique(df_reduce$filename)))
croc_train <- feature_croc %>% filter(filename %in% filename_train)
croc_test <- feature_croc %>% filter(!(filename %in% filename_train))
no_event_train <- feature_no_event %>% filter(filename %in% filename_train)
no_event_test <- feature_no_event %>% filter(!(filename %in% filename_train))
y_train <- as.factor(c(croc_train$event, no_event_train$event))
x_train <- rbind.data.frame(croc_train[, 5:20], no_event_train[, 5:20])
y_test <- as.factor((c(croc_test$event, no_event_test$event)))
x_test <- rbind.data.frame(croc_test[, 5:20], no_event_test[, 5:20])
y_test_chat <- as.factor(c(feature_croc[indice_croc,"event"], feature_no_event[indice_event,"event"]))
x_test_chat <- rbind.data.frame(feature_croc[indice_croc, 5:20], feature_no_event[indice_event, 5:20])
#Model
model <- randomForest( y_train~ .,
data = x_train,
ntree = 40,
mtry = 4,
importance = TRUE)
pred_test <-  predict(model, newdata = x_test)
ERROR_glob <- ERROR_glob + get.error(y_test, pred_test)
CONFU_0_glob <- CONFU_0_glob + model$confusion[1,3]
CONFU_1_glob <- CONFU_1_glob + model$confusion[2,3]
pred_test_chat <-  predict(model, newdata = x_test_chat)
matrix_chat <- table(pred_test_chat, y_test_chat)
ERROR_chat <- ERROR_chat + (matrix_chat[2] + matrix_chat[3]) / sum(matrix_chat)
CONFU_0_chat <- CONFU_0_chat + (matrix_chat[2] / sum(matrix_chat[,1]))
CONFU_1_chat <- CONFU_1_chat + (matrix_chat[3] / sum(matrix_chat[,2]))
}
IIB3_Error_cat <- IIB3_Error_cat %>% add_row(
chat = chat,
ERROR_glob = ERROR_glob/10,
class_1_glob = CONFU_1_glob/10,
class_0_glob = CONFU_0_glob/10,
ERROR_chat = ERROR_chat/10,
class_1_chat = CONFU_1_chat/10,
class_0_chat = CONFU_0_chat/10,
d_ERROR =  ERROR_chat/10 - ERROR_glob/10,
d_class_1 = CONFU_1_chat/10 - CONFU_1_glob/10,
d_class_0 = CONFU_0_chat/10 - CONFU_0_glob/10,
expansion = expansion,
size = size,
ovl_croc = ovl_croc,
ovl_no_event = ovl_no_event
)
}
for (cat in unique(IIB3_df_wav$chat)){
print(cat)
indice_chat <- grep(pattern = cat, x = IIB3_df_wav$chat)
indice_croc <- grep(pattern = cat, x = feature_croc$filename)
indice_event <- grep(pattern = cat, x = feature_no_event$filename)
df_reduce <- IIB3_df_wav[-indice_chat,] #dataset without one cat
ERROR_glob <-0
CONFU_0_glob <- 0
CONFU_1_glob <- 0
ERROR_chat <- 0
CONFU_0_chat <- 0
CONFU_1_chat <- 0
for (i in 1:10){
set.seed(i)
filename_train <- sample(unique(df_reduce$filename), 0.7 * length(unique(df_reduce$filename)))
croc_train <- feature_croc %>% filter(filename %in% filename_train)
croc_test <- feature_croc %>% filter(!(filename %in% filename_train))
no_event_train <- feature_no_event %>% filter(filename %in% filename_train)
no_event_test <- feature_no_event %>% filter(!(filename %in% filename_train))
y_train <- as.factor(c(croc_train$event, no_event_train$event))
x_train <- rbind.data.frame(croc_train[, 5:20], no_event_train[, 5:20])
y_test <- as.factor((c(croc_test$event, no_event_test$event)))
x_test <- rbind.data.frame(croc_test[, 5:20], no_event_test[, 5:20])
y_test_chat <- as.factor(c(feature_croc[indice_croc,"event"], feature_no_event[indice_event,"event"]))
x_test_chat <- rbind.data.frame(feature_croc[indice_croc, 5:20], feature_no_event[indice_event, 5:20])
#Model
model <- randomForest( y_train~ .,
data = x_train,
ntree = 40,
mtry = 4,
importance = TRUE)
pred_test <-  predict(model, newdata = x_test)
ERROR_glob <- ERROR_glob + get.error(y_test, pred_test)
CONFU_0_glob <- CONFU_0_glob + model$confusion[1,3]
CONFU_1_glob <- CONFU_1_glob + model$confusion[2,3]
pred_test_chat <-  predict(model, newdata = x_test_chat)
matrix_chat <- table(pred_test_chat, y_test_chat)
ERROR_chat <- ERROR_chat + (matrix_chat[2] + matrix_chat[3]) / sum(matrix_chat)
CONFU_0_chat <- CONFU_0_chat + (matrix_chat[2] / sum(matrix_chat[,1]))
CONFU_1_chat <- CONFU_1_chat + (matrix_chat[3] / sum(matrix_chat[,2]))
}
IIB3_Error_cat <- IIB3_Error_cat %>% add_row(
chat = cat,
ERROR_glob = ERROR_glob/10,
class_1_glob = CONFU_1_glob/10,
class_0_glob = CONFU_0_glob/10,
ERROR_chat = ERROR_chat/10,
class_1_chat = CONFU_1_chat/10,
class_0_chat = CONFU_0_chat/10,
d_ERROR =  ERROR_chat/10 - ERROR_glob/10,
d_class_1 = CONFU_1_chat/10 - CONFU_1_glob/10,
d_class_0 = CONFU_0_chat/10 - CONFU_0_glob/10,
expansion = expansion,
size = size,
ovl_croc = ovl_croc,
ovl_no_event = ovl_no_event
)
}
IIB3_Error_cat <- as.data.frame(IIB3_Error_cat)
IIB3_Error_cat
write.table(IIB3_Error_cat, file = "data/error/IIB3_Error_cat.txt")
require(dplyr)
require(randomForest)
require(tidyr)
# Function
get.error <- function(class,pred){
cont.tab <- table(class,pred)
return((cont.tab[2,1]+cont.tab[1,2])/(sum(cont.tab)))
}
#Parameters
expansion <- 0.6
size <- 0.2
ovl_croc <- 0.7
ovl_no_event <- 0
Error_kibble <- tibble(
kibble = character(),
ERROR_glob = numeric(),
class_1_glob = numeric(),
class_0_glob = numeric(),
ERROR_kibble = numeric(),
class_1_kibble = numeric(),
class_0_kibble = numeric(),
d_ERROR = numeric(),
d_class_1 = numeric(),
d_class_0 = numeric(),
expansion = numeric(),
size = numeric(),
ovl_croc = numeric(),
ovl_no_event = numeric()
)
require(dplyr)
require(randomForest)
require(tidyr)
# Function
get.error <- function(class,pred){
cont.tab <- table(class,pred)
return((cont.tab[2,1]+cont.tab[1,2])/(sum(cont.tab)))
}
#Parameters
expansion <- 0.6
size <- 0.2
ovl_croc <- 0.7
ovl_no_event <- 0
#Initialisation
Error_kibble <- tibble(
kibble = character(),
ERROR_glob = numeric(),
class_1_glob = numeric(),
class_0_glob = numeric(),
ERROR_kibble = numeric(),
class_1_kibble = numeric(),
class_0_kibble = numeric(),
d_ERROR = numeric(),
d_class_1 = numeric(),
d_class_0 = numeric(),
expansion = numeric(),
size = numeric(),
ovl_croc = numeric(),
ovl_no_event = numeric()
)
#Features
feature_croc <- give_breaks(frame_size = size, ovlp_frame = ovl_break,
percent_expansion = expansion,
wav_path = "data/wav/", data = IIB3_df_wav)
feature_no_event <- give_no_event(frame_size = size, ovlp_frame = ovl_no_event,
wav_path = "data/wav/", data = IIB3_df_wav)
for (kibble in unique(IIB3_df_wav$kibble)){
print(kibble)
indice_kibble <- grep(pattern = kibble, x = IIB3_df_wav$kibble)
indice_croc <- grep(pattern = kibble, x = feature_croc$filename)
indice_event <- grep(pattern = kibble, x = feature_no_event$filename)
df_reduce <- IIB3_df_wav[-indice_kibble,]
ERROR_glob <-0
CONFU_0_glob <- 0
CONFU_1_glob <- 0
ERROR_kibble <- 0
CONFU_0_kibble <- 0
CONFU_1_kibble <- 0
for (i in 1:10){
set.seed(i)
filename_train <- sample(unique(df_reduce$filename), 0.7 * length(unique(df_reduce$filename)))
croc_train <- feature_croc %>% filter(filename %in% filename_train)
croc_test <- feature_croc %>% filter(!(filename %in% filename_train))
no_event_train <- feature_no_event %>% filter(filename %in% filename_train)
no_event_test <- feature_no_event %>% filter(!(filename %in% filename_train))
y_train <- as.factor(c(croc_train$event, no_event_train$event))
x_train <- rbind.data.frame(croc_train[, 5:20], no_event_train[, 5:20])
y_test <- as.factor((c(croc_test$event, no_event_test$event)))
x_test <- rbind.data.frame(croc_test[, 5:20], no_event_test[, 5:20])
y_test_kibble <- as.factor(c(feature_croc[indice_croc,"event"], feature_no_event[indice_event,"event"]))
x_test_kibble <- rbind.data.frame(feature_croc[indice_croc, 5:20], feature_no_event[indice_event, 5:20])
#Model
model <- randomForest( y_train~ .,
data = x_train,
ntree = 40,
mtry = 4,
importance = TRUE)
pred_test <-  predict(model, newdata = x_test)
ERROR_glob <- ERROR_glob + get.error(y_test, pred_test)
CONFU_0_glob <- CONFU_0_glob + model$confusion[1,3]
CONFU_1_glob <- CONFU_1_glob + model$confusion[2,3]
pred_test_kibble <-  predict(model, newdata = x_test_kibble)
matrix_kibble <- table(pred_test_kibble, y_test_kibble)
ERROR_kibble <- ERROR_kibble + (matrix_kibble[2] + matrix_kibble[3]) / sum(matrix_kibble)
CONFU_0_kibble <- CONFU_0_kibble + (matrix_kibble[2] / sum(matrix_kibble[,1]))
CONFU_1_kibble <- CONFU_1_kibble + (matrix_kibble[3] / sum(matrix_kibble[,2]))
}
Error_kibble <- Error_kibble %>% add_row(
kibble = kibble,
ERROR_glob = ERROR_glob/10,
class_1_glob = CONFU_1_glob/10,
class_0_glob = CONFU_0_glob/10,
ERROR_kibble = ERROR_kibble/10,
class_1_kibble = CONFU_1_kibble/10,
class_0_kibble = CONFU_0_kibble/10,
d_ERROR =  ERROR_kibble/10 - ERROR_glob/10,
d_class_1 = CONFU_1_kibble/10 - CONFU_1_glob/10,
d_class_0 = CONFU_0_kibble/10 - CONFU_0_glob/10,
expansion = expansion,
size = size,
ovl_croc = ovl_croc,
ovl_no_event = ovl_no_event
)
}
remove(feature_croc, feature_no_event,
croc_train, croc_test,
no_event_train, no_event_test,
y_train, x_train, y_test, x_test)
Error_kibble <- as.data.frame(Error_kibble)
Error_kibble
write.table(Error_kibble, file = "data/error/IIB3_Error_kibble.txt")
IIB3_Error_cat
