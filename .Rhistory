stop("n need to be positive")
}
}
type <- tryCatch(match.arg(type, c("for", "while", "repeat")), "for")
switch(type,
"for" = factoriel_for(n),
"while" = factoriel_while(n),
"repeat" = factoriel_repeat(n))
}
compareFact(5, type = "frf")
#' CompareFact
#'
#' Cette fonction permet de renvoyer le calcul factoriel d'un entier en choisissant la méthode de calcul
#'
#' @param n : numeric. Entier dont on veut calculer le calcul factoriel
#' @param type : character. Type de calcul choisi
#'
#' @return : resultat du calcul factoriel
#'
#' @importFrom base paste0#'
compareFact <- function(n, type = "for"){
if (n != round(n)){
stop("n need to be an integer")
}
if(n <= 0){
if (n==0){ return(1)
}else{
stop("n need to be positive")
}
}
type <- tryCatch( expr = match.arg(type, c("for", "while", "repeat")), error=  "for")
switch(type,
"for" = factoriel_for(n),
"while" = factoriel_while(n),
"repeat" = factoriel_repeat(n))
}
compareFact(5, type = "frf")
compareFact(5, 'f')
compareFact(5, 'wh')
autoplot(res_while)
autoplot(res_repeat)
ggplot2::autoplot(res_while)
ggplot2::autoplot(res_repeat)
res_for
#' CompareFact
#'
#' Cette fonction permet de renvoyer le calcul factoriel d'un entier en choisissant la méthode de calcul
#'
#' @param n : numeric. Entier dont on veut calculer le calcul factoriel
#' @param type : character. Type de calcul choisi
#'
#' @return : resultat du calcul factoriel
#'
#' @importFrom base paste0#'
compareFact <- function(n, type = "for"){
if (n != round(n)){
stop("n need to be an integer")
}
if(n <= 0){
if (n==0){ return(1)
}else{
stop("n need to be positive")
}
}
type <- tryCatch(match.arg(type, c("for", "while", "repeat")), error = function(e){"for"})
switch(type,
"for" = factoriel_for(n),
"while" = factoriel_while(n),
"repeat" = factoriel_repeat(n))
}
compareFact(5, type = "frf")
plot(x, factoriel_for(x))
factoriel_for(x)
y <- apply(x, FUN = factoriel_for)
x <- 1:5
y <- apply(x, FUN = factoriel_for)
y <- apply(x, 1,FUN = factoriel_for)
y <- apply(x, 2,FUN = factoriel_for)
x <- as.data.frame(1:5)
y <- apply(x,FUN = factoriel_for)
View(x)
y <- apply(x,1,FUN = factoriel_for)
plot(1:5, factoriel_for(x))
plot(1:5, y)
res <- microbenchmark(factoriel_for(100000), factoriel_while(100000),factoriel_repeat(100000))
res
# Import Dataset ----
require(data.table)
library(readr)
data_tot <- read_csv("E:/Cours/M2_Stat/UFOs/App/scrubbed.csv", col_types = cols(comments = col_skip(),`date posted` = col_skip(), datetime = col_skip(),
`duration (hours/min)` = col_skip(),
`duration (seconds)` = col_skip(), shape = col_character(),
state = col_skip()), locale = locale())
data_na <- na.omit(data_tot)
data_hist <- data_na[, list(n = .N), by = list(shape)]
data_hist <- data_na[, list(n = .N)]
data_hist <- data_na[, list(shape)]
# Import Dataset ----
require(data.table)
library(readr)
data_tot <- read_csv("E:/Cours/M2_Stat/UFOs/App/scrubbed.csv", col_types = cols(comments = col_skip(),`date posted` = col_skip(), datetime = col_skip(),
`duration (hours/min)` = col_skip(),
`duration (seconds)` = col_skip(), shape = col_character(),
state = col_skip()), locale = locale())
data_na <- na.omit(data_tot)
data_na
data_na[, country]
data_na[, .(country)]
data_na[, list(country)]
# Import Dataset ----
require(data.table)
data_na[list(country)]
class(data_na)
data_na <- as.data.table(data_na)
data_hist <- data_na[, list(n = .N, shape = shape), by = shape]
shiny::runApp('E:/Cours/M2_Stat/UFOs/App')
class(data_hist)
runApp('E:/Cours/M2_Stat/UFOs/App')
runApp('E:/Cours/M2_Stat/UFOs/App')
runApp('E:/Cours/M2_Stat/UFOs/App')
runApp('E:/Cours/M2_Stat/UFOs/App')
#Order
data_hist[order(n)]
#Order
data_hist[order(n, decreasing = T)]
runApp('E:/Cours/M2_Stat/UFOs/App')
runApp('E:/Cours/M2_Stat/UFOs/App')
View(data_hist)
names(data_hist)
data_hist$shape
data_hist$shape
data_hist$shape = with(data_hist, reorder(shape, n, mean))
runApp('E:/Cours/M2_Stat/UFOs/App')
runApp('E:/Cours/M2_Stat/UFOs/App')
runApp('E:/Cours/M2_Stat/UFOs/App')
install.packages("mlbench")
require(mlbench)
?LetterRecognition
load(LetterRecognition)
LetterRecognition
data(LetterRecognition)
n <- nrow(LetterRecognition)
n.train <- n/4
n.test <- N-n.train
data(LetterRecognition)
n <- nrow(LetterRecognition)
n.train <- n/4
n.test <- n-n.train
n
ind.train <- sample(1:n, n.train)
data.train <- LetterRecognition[ind.train,]
data.test <-  LetterRecognition[-ind.train,]
n.train <- 1000
n.test <- n-n.train
ind.train <- sample(1:n, n.train)
data.train <- LetterRecognition[ind.train,]
data.test <-  LetterRecognition[-ind.train,]
# 2 PACKAGE NNET ----
require(nnet)
?nnet
reseau.1 <-  nnet(lettr ~ ., data = data.train)
reseau.1 <-  nnet(lettr ~ ., data = data.train, size = 1)
reseau.1_predict <- predict(reseau.1, data.test[,-1])
reseau_table <- table(reseau.1_predict, data.test[,1])
reseau.1_predict
data.test[,1]
reseau.1_predict
reseau.1_predict <- predict(reseau.1, data.test)
reseau_table <- table(reseau.1_predict, data.test[,1])
reseau.1_predict
which.max(reseau.1_predict)
colnames(which.max(reseau.1_predict))
reseau.1_predict <- predict(reseau.1, data.test[,-1])
colnames(which.max(reseau.1_predict))
require(FactoMineR)
?HMFA
data(wine)
data(wine)
hierar <- list(c(2,5,3,10,9,2), c(4,2))
res.hmfa <- HMFA(wine, H = hierar, type=c("n",rep("s",5)))
res.hmfa$res$coord
res.hmfa$eig
res.hmfa$ind$coord
plot(res.hmfa)
?pca
?cpa
?acp
?CPA
CPA
?PCA
shiny::runApp('E:/Cours/M2_Stat/UFOs/App')
data(doubs)
require(ade4)
data(doubs)
doubs
require(FactoMineR)
?HMFA
data(wine)
hierar <- list(c(2,5,3,10,9,2), c(4,2))
res.hmfa <- HMFA(wine, H = hierar, type=c("n",rep("s",5)))
res.hmfa$ind$coord
plot(res.hmfa)
?PCA
# 2  Perform an MFA ----
res.g1 <- MCA(wine[,1:2], graph = F)
res.g2 <- PCA(wine[,3:7],graph = F)
res.g3 <- PCA(wine[,8:10],graph = F)
res.g4 <- PCA(wine[,11:20],graph = F)
res.g1
dim(res.g1)
dim(res.g1$eig)
res.g1$eig
res.g4$eig
# 2  Perform an MFA ----
res.g1 <- MCA(wine[,1:2],graph = F)
res.g2 <- PCA(wine[,3:7],graph = F)
res.g3 <- PCA(wine[,8:10],graph = F)
res.g4 <- PCA(wine[,11:20],graph = F,ncp=10)
dim(res.g1$eig)
res.g1$eig
res.g4$eig
res.g2$eig
res.g3$eig
#Build vector of weights (first node of hierarchy)
w.L1.1 <- c(1/rep(res.g1$eig[1,1],5),1/rep(res.g2$eig[1,1],5),
1/rep(res.g3$eig[1,1],3),1/rep(res.g4$eig[1,1],10))
w.L1.1
1/rep(res.g1$eig[1,1],5)
rep(res.g1$eig[1,1]
)
rep(res.g4$eig[1,1]
)
L1.1 <- cbind(res.g1$ind$coord,res.g2$ind$coord,res.g3$ind$coord,res.g4$ind$coord)
L1.1
wine[,1:2]
wine[,3:7]
#AFM avec un programme d'ACP
res.pca.w.L1.1 <- PCA(L1.1,scale.unit = F,col.w = w.L1.1,graph = F,ncp = 20)
res.pca.w.L1.1$eig
res.pca.w.L1.1$ind$coord
res.pca.w.L1.1$eig
wine[,21:29]
wine[,30:31]
res.g5 <- PCA(wine[,21:29], graph = F)
res.g6 <- PCA(wine[,30:31], graph = F)
dim(res.g5$eig)
dim(res.g1$eig)
dim(res.g5$eig)[1]
w.L1.2 <- c(1/rep(res.g5$eig[1,1], dim(res.g5$eig)[1]), 1/rep(res.g6$eig[1,1], dim(res.g6$eig)[1] ))
w.L1.2
L1.2 <- cbind(res.g5$ind$coord, res.g6$ind$coord)
L1.2
dim(res.g5$eig)
res.pca.W.L1.2 <- PCA(L1.2, scale.unit = F, col.w = w.L1.2, graph = F, ncp = 10)
res.pca.W.L1.2 <- PCA(L1.2, scale.unit = F, col.w = w.L1.2, graph = F, ncp = 11)
w.L1.2 <- c(1/rep(res.g5$eig[1,1], dim(res.g5$eig)[1]), 1/rep(res.g6$eig[1,1], dim(res.g6$eig)[1] ))
w.L1.2
L1.2 <- cbind(res.g5$ind$coord, res.g6$ind$coord)
L1.2
dim(L1.2)
res.g5$ind$coord
dim(res.g5$eig)
dim(res.g6$eig)
dim(res.g5$eig)[1]
dim(res.g1$eig)
res.g1$eig
res.g5
res.g5$eig
res.g6$eig
w.L1.2 <- c(1/rep(res.g5$eig[1,1],9), 1/rep(res.g6$eig[1,1], 2 ))
w.L1.2
res.g5$ind$coord
res.g6$ind$coord
#Second node
res.g5 <- PCA(wine[,21:29], graph = F, ncp = 9)
res.g6 <- PCA(wine[,30:31], graph = F)
res.g5$eig
res.g6$eig
dim(res.g5$eig)
dim(res.g6$eig)
res.g5$ind$coord
res.g6$ind$coord
res.g5$ind$coord
L1.2 <- cbind(res.g5$ind$coord, res.g6$ind$coord)
L1.2
dim(L1.2)
res.pca.W.L1.2 <- PCA(L1.2, scale.unit = F, col.w = w.L1.2, graph = F, ncp = 11)
res.pcq.w.L1.2
res.pca.w.L1.2
res.pca.W.L1.2 <- PCA(L1.2, scale.unit = F, col.w = w.L1.2, graph = F, ncp = 11)
res.pca.W.L1.2
res.pca.W.L1.2$eig
res.pca.w.L1.2$ind$coord
res.pca.W.L1.2$ind$coord
res.pca.w.L1.2 <- PCA(L1.2, scale.unit = F, col.w = w.L1.2, graph = F, ncp = 11)
res.pca.w.L1.2$eig
res.pca.w.L1.2$ind$coord
require(FactoMineR)
data(wine)
hierar <- list(c(2,5,3,10,9,2), c(4,2))
res.hmfa <- HMFA(wine, H = hierar, type=c("n",rep("s",5)))
res.hmfa$ind$coord
plot(res.hmfa)
?PCA
# 2  Perform an MFA ----
res.g1 <- MCA(wine[,1:2],graph = F)
res.g2 <- PCA(wine[,3:7],graph = F)
res.g3 <- PCA(wine[,8:10],graph = F)
res.g4 <- PCA(wine[,11:20],graph = F,ncp=10)
dim(res.g1$eig)
res.g1$eig
res.g2$eig
res.g3$eig
res.g4$eig
#Build vector of weights (first node of hierarchy)
w.L1.1 <- c(1/rep(res.g1$eig[1,1],5),1/rep(res.g2$eig[1,1],5),
1/rep(res.g3$eig[1,1],3),1/rep(res.g4$eig[1,1],10))
w.L1.1
L1.1 <- cbind(res.g1$ind$coord,res.g2$ind$coord,res.g3$ind$coord,res.g4$ind$coord)
L1.1
#AFM avec un programme d'ACP
res.pca.w.L1.1 <- PCA(L1.1,scale.unit = F,col.w = w.L1.1,graph = F,ncp = 20)
res.pca.w.L1.1$ind$coord[,1:5]
res.pca.w.L1.1$eig
res.pca.w.L1.1$ind$coord
#Second node
res.g5 <- PCA(wine[,21:29], graph = F, ncp = 9)
res.g6 <- PCA(wine[,30:31], graph = F)
res.g5$eig
res.g6$eig
dim(res.g5$eig)
dim(res.g6$eig)
res.g5$ind$coord
res.g6$ind$coord
w.L1.2 <- c(1/rep(res.g5$eig[1,1],9), 1/rep(res.g6$eig[1,1], 2 ))
w.L1.2
L1.2 <- cbind(res.g5$ind$coord, res.g6$ind$coord)
L1.2
dim(L1.2)
res.pca.w.L1.2 <- PCA(L1.2, scale.unit = F, col.w = w.L1.2, graph = F, ncp = 11)
res.pca.w.L1.2$eig
res.pca.w.L1.2$ind$coord
#MFA on the second level of hierarchy
res.pca.w.L1.1
res.pca.W.L1.2
res.pca.w.L1.2
res.pca.w.L1.1$eig
res.pca.w.L1.2$eig
w.L2.1 <- c(1/rep(res.pca.w.L1.1$eig[1,1], 20 ), 1/rep(res.pca.w.L1.2$eig[1,1], 11))
w.L2 <- c(1/rep(res.pca.w.L1.1$eig[1,1], 20 ), 1/rep(res.pca.w.L1.2$eig[1,1], 11))
L2 <- cbind(res.pca.w.L1.1$ind$coord, res.pca.w.L1.2$ind$coord)
res.pca.w.L2 <- PCA(L2, scale.unit = F, col.w = w.L2, ncp = 31)
res.hmfa <- HMFA(wine, H = hierar, type=c("n",rep("s",5)))
res.pca.w.L2 <- PCA(L2, scale.unit = F, col.w = w.L2, ncp = 31)
res.pca.w.L2$ind$coord
res.hmfa$ind$coord
res.pca.w.L2$ind$coord[1:10,1:5]
res.hmfa$ind$coord[1:10,1:5]
install.packages("keras")
library(keras)
library(tidyr)
library(ggplot2)
require(glmnet)
require("e1071") ## Include svm function
require("kernlab") ## Function ksvm
require("nnet") ## Function multinom
require("MASS") ## Function LDA and QDA
require("class") ## Function knn
require("caret") ## Function train and tools for assessing classification performances
fashion_mnist <- dataset_fashion_mnist()
Y
fashion_mnist <- dataset_fashion_mnist()
install_tensorflow()
install.packages("tensorflow")
fashion_mnist <- dataset_fashion_mnist()
library(keras)
fashion_mnist <- dataset_fashion_mnist()
library(keras)
library(tidyr)
library(ggplot2)
require(glmnet)
require("e1071") ## Include svm function
require("kernlab") ## Function ksvm
require("nnet") ## Function multinom
require("MASS") ## Function LDA and QDA
require("class") ## Function knn
require("caret") ## Function train and tools for assessing classification performances
fashion_mnist <- dataset_fashion_mnist()
tensorflow::install_tensorflow()
library(tensorflow)
remove.packages("tensorflow", lib="~/R/win-library/3.6")
tensorflow::install_tensorflow()
library(keras)
library(tidyr)
library(ggplot2)
require(glmnet)
require("e1071") ## Include svm function
require("kernlab") ## Function ksvm
require("nnet") ## Function multinom
require("MASS") ## Function LDA and QDA
require("class") ## Function knn
require("caret") ## Function train and tools for assessing classification performances
library(shiny); runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
library(shinythemes)
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
runApp('E:/Cours/M2_Stat/UFOs/Accueil.R')
library(gdata)
ipsos<-read.xls("myData/ipsos.xlsx", encoding="latin1")
knitr::opts_chunk$set(echo = TRUE)
library(FactoMineR)
data("decathlon")
res.pca = PCA(decathlon[,1:10], scale.unit=TRUE, ncp=5, graph=F)
res.hcpc <- HCPC(res.pca$var, nb.clust = -1)
install.packages('keras')
install.packages('tensorflow')
library(keras)
library(tensorflow)
install_keras()
install_tensorflow()
install_tensorflow()
install_keras(method = "conda", conda = "C:/Users/audre/miniconda3")
library(keras)
install_keras(method = "conda", conda = "C:/Users/audre/miniconda3")
install_keras()
library(keras)
install_keras(method = "conda", conda = "C:/Users/audre/miniconda3")
install_keras(method = "conda", conda = "C:\Users\audre\miniconda3")
install.packages("tfdatasets")
library(tensorflow  )
install.packages("keras")
install.packages("keras")
library(keras)
install_keras()
library(tensorflow)
R.version
install.packages("installr")
library(installr)
updateR()
R.version
library(installr)
library(installr)
library(stringr)
R.version
detach("package:stringr", unload = TRUE)
library(abind)
library(keras)
install.packages("keras")
library(keras)
install_keras()
library(keras)
install_keras()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
library(readr)
ESMI <- read_csv("Emma_stress/CSV-2fr/ESMI.csv",
col_types = cols(`Êtes-vous actuellement en couple et vivez-vous de la violence conjugale?` = col_character()))
str(ESMI)
View(ESMI)
ESMI_2 <- ESMI[c(-6:-9),]
Esmi_na <- ESMI_2[!is.na(ESMI_2),]
Esmi_na <- ESMI_2[!is.na(ESMI_2)]
setwd("E:/Cours/M2_Stat/Projet_inge/ProjetInge")
#Import des donnÃ©es
library(tuneR)
library(seewave)
notchi2_wav <- readWave("../data/audio_brute/chat_194.wav")
spectro_wav <- function(path, wl = 512, ovlp = 0.1){
require(tuneR)
require(seewave)
fich_wav <- readWave(path)
spectro(fich_wav, osc = TRUE, wl = wl, ovlp = ovlp)
}
#Plot
spectro_wav(path = "../data/videotowav/croc_nouch_26sec.wav", wl = 256)
?readWave
?spectro
